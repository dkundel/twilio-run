import path from 'path';

export const MODULE_ROOT = path.resolve(__dirname, '../../');

/**
 * Turns a set of stack frames into a stack trace string equivalent to the one
 * generated by V8
 *
 * https://v8.dev/docs/stack-trace-api
 *
 * @param err The error instance for this stack trace
 * @param stack Callsite instances for each frame from V8
 */
export function stringifyStackTrace(err: Error, stack: NodeJS.CallSite[]) {
  const callSiteStrings = stack
    .map(callSite => {
      return `    at ${callSite}`;
    })
    .join('\n');
  const stackTrace = `${err.name}: ${err.message}\n${callSiteStrings}`;
  return stackTrace;
}

/**
 * Returns all stack frames until one is reached that comes from inside twilio-run
 *
 * https://v8.dev/docs/stack-trace-api
 *
 * @param stack Array of callsite instances from the V8 Stack Trace API
 */
export function filterCallSites(stack: NodeJS.CallSite[]): NodeJS.CallSite[] {
  let indexOfFirstInternalCallSite = stack.findIndex(callSite =>
    callSite.getFileName()?.includes(MODULE_ROOT)
  );
  indexOfFirstInternalCallSite =
    indexOfFirstInternalCallSite === -1
      ? stack.length
      : indexOfFirstInternalCallSite;
  return stack.slice(0, indexOfFirstInternalCallSite);
}

/**
 * Removes any stack traces that are internal to twilio-run and replaces it
 * with one [Twilio Dev Server internals] statement.
 *
 * To be used with Error.prepareStackTrace from the V8 Stack Trace API
 * https://v8.dev/docs/stack-trace-api
 *
 * @param err The error instance for this stack trace
 * @param stack Callsite instances for each from from V8 Stack Trace API
 */
export function formatStackTraceWithInternals(
  err: Error,
  stack: NodeJS.CallSite[]
): string {
  const filteredStack = filterCallSites(stack);
  const stackTraceWithoutInternals = stringifyStackTrace(err, filteredStack);
  if (filteredStack.length === stack.length) {
    return stackTraceWithoutInternals;
  }
  return `${stackTraceWithoutInternals}\n    at [Twilio Dev Server internals]`;
}
